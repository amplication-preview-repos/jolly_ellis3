/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { ReelService } from "../reel.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { ReelCreateInput } from "./ReelCreateInput";
import { Reel } from "./Reel";
import { ReelFindManyArgs } from "./ReelFindManyArgs";
import { ReelWhereUniqueInput } from "./ReelWhereUniqueInput";
import { ReelUpdateInput } from "./ReelUpdateInput";
import { AnalysisFindManyArgs } from "../../analysis/base/AnalysisFindManyArgs";
import { Analysis } from "../../analysis/base/Analysis";
import { AnalysisWhereUniqueInput } from "../../analysis/base/AnalysisWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class ReelControllerBase {
  constructor(
    protected readonly service: ReelService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Reel })
  @nestAccessControl.UseRoles({
    resource: "Reel",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createReel(@common.Body() data: ReelCreateInput): Promise<Reel> {
    return await this.service.createReel({
      data: data,
      select: {
        comments: true,
        createdAt: true,
        followersGained: true,
        id: true,
        likes: true,
        link: true,
        reach: true,
        saves: true,
        shares: true,
        updatedAt: true,
        views: true,
        watchTime: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Reel] })
  @ApiNestedQuery(ReelFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Reel",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async reels(@common.Req() request: Request): Promise<Reel[]> {
    const args = plainToClass(ReelFindManyArgs, request.query);
    return this.service.reels({
      ...args,
      select: {
        comments: true,
        createdAt: true,
        followersGained: true,
        id: true,
        likes: true,
        link: true,
        reach: true,
        saves: true,
        shares: true,
        updatedAt: true,
        views: true,
        watchTime: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Reel })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Reel",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async reel(
    @common.Param() params: ReelWhereUniqueInput
  ): Promise<Reel | null> {
    const result = await this.service.reel({
      where: params,
      select: {
        comments: true,
        createdAt: true,
        followersGained: true,
        id: true,
        likes: true,
        link: true,
        reach: true,
        saves: true,
        shares: true,
        updatedAt: true,
        views: true,
        watchTime: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Reel })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Reel",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateReel(
    @common.Param() params: ReelWhereUniqueInput,
    @common.Body() data: ReelUpdateInput
  ): Promise<Reel | null> {
    try {
      return await this.service.updateReel({
        where: params,
        data: data,
        select: {
          comments: true,
          createdAt: true,
          followersGained: true,
          id: true,
          likes: true,
          link: true,
          reach: true,
          saves: true,
          shares: true,
          updatedAt: true,
          views: true,
          watchTime: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Reel })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Reel",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteReel(
    @common.Param() params: ReelWhereUniqueInput
  ): Promise<Reel | null> {
    try {
      return await this.service.deleteReel({
        where: params,
        select: {
          comments: true,
          createdAt: true,
          followersGained: true,
          id: true,
          likes: true,
          link: true,
          reach: true,
          saves: true,
          shares: true,
          updatedAt: true,
          views: true,
          watchTime: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/analyses")
  @ApiNestedQuery(AnalysisFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Analysis",
    action: "read",
    possession: "any",
  })
  async findAnalyses(
    @common.Req() request: Request,
    @common.Param() params: ReelWhereUniqueInput
  ): Promise<Analysis[]> {
    const query = plainToClass(AnalysisFindManyArgs, request.query);
    const results = await this.service.findAnalyses(params.id, {
      ...query,
      select: {
        comments: true,
        createdAt: true,
        editingStyle: true,
        effectiveness: true,
        hook: true,
        id: true,

        reel: {
          select: {
            id: true,
          },
        },

        structure: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/analyses")
  @nestAccessControl.UseRoles({
    resource: "Reel",
    action: "update",
    possession: "any",
  })
  async connectAnalyses(
    @common.Param() params: ReelWhereUniqueInput,
    @common.Body() body: AnalysisWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      analyses: {
        connect: body,
      },
    };
    await this.service.updateReel({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/analyses")
  @nestAccessControl.UseRoles({
    resource: "Reel",
    action: "update",
    possession: "any",
  })
  async updateAnalyses(
    @common.Param() params: ReelWhereUniqueInput,
    @common.Body() body: AnalysisWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      analyses: {
        set: body,
      },
    };
    await this.service.updateReel({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/analyses")
  @nestAccessControl.UseRoles({
    resource: "Reel",
    action: "update",
    possession: "any",
  })
  async disconnectAnalyses(
    @common.Param() params: ReelWhereUniqueInput,
    @common.Body() body: AnalysisWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      analyses: {
        disconnect: body,
      },
    };
    await this.service.updateReel({
      where: params,
      data,
      select: { id: true },
    });
  }
}
