/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Reel as PrismaReel,
  Analysis as PrismaAnalysis,
} from "@prisma/client";

export class ReelServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ReelCountArgs, "select">): Promise<number> {
    return this.prisma.reel.count(args);
  }

  async reels(args: Prisma.ReelFindManyArgs): Promise<PrismaReel[]> {
    return this.prisma.reel.findMany(args);
  }
  async reel(args: Prisma.ReelFindUniqueArgs): Promise<PrismaReel | null> {
    return this.prisma.reel.findUnique(args);
  }
  async createReel(args: Prisma.ReelCreateArgs): Promise<PrismaReel> {
    return this.prisma.reel.create(args);
  }
  async updateReel(args: Prisma.ReelUpdateArgs): Promise<PrismaReel> {
    return this.prisma.reel.update(args);
  }
  async deleteReel(args: Prisma.ReelDeleteArgs): Promise<PrismaReel> {
    return this.prisma.reel.delete(args);
  }

  async findAnalyses(
    parentId: string,
    args: Prisma.AnalysisFindManyArgs
  ): Promise<PrismaAnalysis[]> {
    return this.prisma.reel
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .analyses(args);
  }
}
